<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.lbcmmszdntnt.domain.okr.model.mapper.TeamOkrMapper">

    <resultMap extends="BaseResultMap" id="KeyResultsMap" type="cn.lbcmmszdntnt.domain.okr.model.vo.TeamOkrStatisticVO">
        <result property="isOver" column="is_over" jdbcType="BIT"/>
        <result property="degree" column="degree" jdbcType="INTEGER"/>
        <collection property="keyResults" ofType="cn.lbcmmszdntnt.domain.core.model.entity.inner.KeyResult"
                    resultMap="cn.lbcmmszdntnt.domain.core.model.mapper.inner.KeyResultMapper.BaseResultMap" columnPrefix="k_" />
    </resultMap>

    <resultMap id="TeamListMap" type="cn.lbcmmszdntnt.domain.okr.model.vo.TeamOkrVO">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="coreId" column="core_id" jdbcType="BIGINT"/>
        <result property="parentTeamId" column="parent_team_id" jdbcType="BIGINT"/>
        <result property="teamName" column="team_name" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="isOver" column="is_over" jdbcType="BIT"/>
        <association property="manager" resultMap="cn.lbcmmszdntnt.domain.user.model.mapper.UserMapper.VOResultMap" columnPrefix="u_"/>
    </resultMap>

    <update id="createFindTeamRootProcedure">
        drop procedure if exists `find_team_root`;
        create procedure `find_team_root` (in start_id bigint)
        begin
            declare current_id bigint;
            declare parent_id bigint;

            set current_id = start_id;
            set parent_id = null;

            node_loop: loop

                select t.parent_team_id into parent_id
                from team_okr t
                where t.id = current_id and t.is_deleted = 0;

                if parent_id is not null then
                    set current_id = parent_id;
                else
                    leave node_loop;
                end if;

            end loop;

            select t.id, t.parent_team_id, t.team_name
            from team_okr t
            where t.id = current_id and t.is_deleted = 0;

        end;
    </update>

    <update id="creatQueryTeamTreeProcedure">
        drop procedure if exists `query_team_tree`;
        create procedure `query_team_tree` (in root_id bigint)
        begin

            drop temporary table if exists `temp_team_nodes`;
            create temporary table `temp_team_nodes` (
                 `id` bigint, `parent_team_id` bigint, `team_name` varchar(32)
            );

            set max_sp_recursion_depth = 255;
            call prepare_team_tree(root_id);

            select t.id, t.parent_team_id, t.team_name from temp_team_nodes t order by t.id;
            drop temporary table if exists `temp_team_nodes`;

        end;

    </update>

    <update id="createPrepareTeamTreeProcedure">
        drop procedure if exists `prepare_team_tree`;
        create procedure `prepare_team_tree` (in root_id bigint)
        begin

            declare done bit default false;
            declare current_id bigint;
            -- 游标
            declare cur cursor for
                select t.id
                from team_okr t
                where t.parent_team_id = root_id and is_deleted = 0;
            declare continue handler for not found set done = true;

            -- 前序遍历
            insert into temp_team_nodes
            select t.id, t.parent_team_id, t.team_name
            from team_okr t
            where t.id = root_id and t.is_deleted = 0;

            open cur;
            read_loop: loop
                fetch cur into current_id;
                if done then
                    leave read_loop;
                end if;
                call prepare_team_tree(current_id);
            end loop;
            close cur;
        end;
    </update>

    <select id="queryTeamTree" statementType="CALLABLE" resultMap="BaseResultMap" >
        call query_team_tree(#{id,jdbcType=BIGINT})
    </select>

    <select id="findTeamRoot" statementType="CALLABLE" resultMap="BaseResultMap">
        call find_team_root(#{id,jdbcType=BIGINT})
    </select>

    <select id="getTeamOkrList" parameterType="java.lang.Long" resultMap="TeamListMap">
        select
            t.id, t.team_name, o.is_over, t.create_time, t.update_time, t.core_id, t.parent_team_id,
            u.id u_id, u.nickname u_nickname, u.email u_email, u.phone u_phone, u.openid u_openid, u.unionid u_unionid, u.photo u_photo
        from user u, team_okr t, okr_core o
        where
            u.id = #{id,jdbcType=BIGINT}
          and u.is_deleted = 0 and t.is_deleted = 0 and o.is_deleted = 0
          and u.id = t.manager_id
          and t.core_id = o.id
        order by o.is_over, o.create_time desc
    </select>

    <select id="selectKeyResultsByTeamId" resultMap="KeyResultsMap">
        select
            t.id, t.core_id, t.team_name, t.parent_team_id, t.manager_id, t.create_time, o.is_over, o.degree,
            k.id k_id, k.first_quadrant_id k_first_quadrant_id,
            k.content k_content, k.probability k_probability
        from
        team_okr t, okr_core o,
        first_quadrant f left join key_result k on f.id = k.first_quadrant_id
        where
        t.is_deleted = 0 and f.is_deleted = 0 and o.is_deleted = 0 and (k.is_deleted = 0 or k.is_deleted is null)
        and t.id in
        <foreach collection="ids" open="(" close=")" item="id" separator=",">
            #{id,jdbcType=BIGINT}
        </foreach>
        and t.core_id = o.id
        and f.core_id = o.id
        order by t.id
    </select>

    <select id="getStatusFlagsByUserId" resultMap="cn.lbcmmszdntnt.domain.core.model.mapper.inner.StatusFlagMapper.UserStatusFlags">
        select
            u.id user_id, s.id s_id, s.color s_color, s.label s_label
        from
            user u left join team_okr t on u.id = t.manager_id and u.is_deleted = 0 and t.is_deleted = 0
            left join okr_core o on t.core_id = o.id and t.is_deleted = 0 and o.is_deleted = 0
            left join fourth_quadrant f on o.id = f.core_id and o.is_deleted = 0 and f.is_deleted = 0
            left join status_flag s on f.id = s.fourth_quadrant_id and s.is_deleted = 0 and f.is_deleted = 0
        where
            o.is_over = 0 and u.is_deleted = 0 and u.id in
            <foreach collection="ids" item="id" open="(" close=")" separator="," >
                #{id,jdbcType=BIGINT}
            </foreach>
    </select>

</mapper>
